import React, { useEffect, useState, useRef, useCallback } from 'react'
import '../App.css'
import Wrapper from '../Layout/Wrapper'
import { useForm } from 'react-hook-form'
import { useFetch } from '../Hooks/useFetch'
import { api } from '../API/api'
import toast from 'react-hot-toast'

const BASE_URL = import.meta.env.VITE_BASE_URL
const Add_Invoice = () => {
    const {
        register,
        handleSubmit,
        formState: { errors },
    } = useForm()
    const dropdownRef = useRef(null)
    const employeeRef = useRef(null)
    const [selectedService, setSelectedService] = useState(null)
    const [costprice, setCostprice] = useState(0)
    const [pending, setPending] = useState(0)
    const [selectedCompany, setSelectedCompany] = useState(null)
    const [filteredCompanies, setFilteredCompanies] = useState([])
    const [search, setSearch] = useState('')
    const [employeeSearch, setEmployeeSearch] = useState('')
    const { data: services } = useFetch('services')
    const { data: companies } = useFetch('companies')
    const [employees, setEmployees] = useState([])
    const [selectedEmployees, setSelectedEmployees] = useState([])
    const creation_month = new Date().getMonth() + 1
    const creation_year = new Date().getFullYear()
    const createInvoice = async (data) => {
        try {
            const dataToSend = {
                service: selectedService,
                company: selectedCompany.username,
                sale_price: data.sale_price,
                total_price: costprice * data.quantity,
                quantity: data.quantity,
                pending_amount: pending,
                creation_month,
                creation_year,
                employees: selectedEmployees.map((employee) => employee._id),
            }

            if (
                !selectedService ||
                !selectedCompany ||
                costprice ||
                selectedEmployees
            ) {
                toast.error('All fields are required')
            }

            console.log(dataToSend)
        } catch (error) {}
    }

    const getCostPrice = useCallback(
        (name) => {
            const service = services?.find((service) => service.name === name)
            if (service) {
                setCostprice(service.cost_price)
            }
        },
        [services],
    )

    const handleClickOutside = useCallback((event) => {
        if (
            dropdownRef.current &&
            !dropdownRef.current.contains(event.target)
        ) {
            document.getElementById('dropdown').classList.add('hidden')
        }
        if (
            employeeRef.current &&
            !employeeRef.current.contains(event.target)
        ) {
            document.getElementById('employee').classList.add('hidden')
        }
    }, [])

    const handleSearchChange = useCallback((e) => {
        setSearch(e.target.value)
    }, [])

    useEffect(() => {
        document.addEventListener('mousedown', handleClickOutside)
        return () => {
            document.removeEventListener('mousedown', handleClickOutside)
        }
    }, [handleClickOutside])

    useEffect(() => {
        setFilteredCompanies(companies)
        if (search) {
            const filtered = companies?.filter((company) => {
                return company.username
                    .toLowerCase()
                    .includes(search.toLowerCase())
            })
            setFilteredCompanies(filtered)
        }
    }, [companies, search])

    const showDropdown = () => {
        document.getElementById('dropdown').classList.toggle('hidden')
    }

    const getEmployees = async () => {
        const company_id = selectedCompany?._id
        if (company_id) {
            const response = await api.get(`${BASE_URL}/employee/${company_id}`)
            if (response.status === 201) {
                setEmployees(response.data.data)
            }
        }
    }

    useEffect(() => {
        getEmployees()
    }, [selectedCompany])

    const showEmployee = () => {
        document.getElementById('employee').classList.toggle('hidden')
    }

    const checkEmployeeAlreadyExists = (id) => {
        return selectedEmployees?.some((employee) => employee === id)
    }

    const handleEmployee = (employee) => {
        if (!checkEmployeeAlreadyExists(employee._id)) {
            setSelectedEmployees([
                ...selectedEmployees,
                { name: employee.name, _id: employee._id },
            ])
            document.getElementById('employee').classList.add('hidden')
            console.log(selectedEmployees)
        }
    }

    const handleEmployeeSearch = useCallback((e) => {
        setEmployeeSearch(e.target.value)
    }, [])

    const handleSalePrice = (e) => {
        const pendingAmount = costprice - e.target.value
        if (pendingAmount < 0) {
            setPending(0)
        } else {
            setPending(pendingAmount)
        }
    }

    return (
        <Wrapper title={'Add Invoice'}>
            <div className=' flex items-center justify-center mx-10 mt-5 '>
                <form
                    onSubmit={handleSubmit(createInvoice)}
                    className='min-w-full bg-lightGold p-10 rounded-3xl'
                >
                    <div className='flex flex-row justify-around items-center gap-x-3'>
                        <div className='mb-3 flex flex-col w-full relative'>
                            <label
                                htmlFor='email'
                                className='block mb-1 text-sm font-medium text-black'
                            >
                                Company
                            </label>

                            <input
                                type='search'
                                name='company'
                                id='company'
                                onChange={handleSearchChange}
                                onClick={showDropdown}
                                placeholder='Search Company'
                                className=' bg-bgLight   text-sm text-white rounded-lg  py-1  px-5 focus:outline-none w-full ring-0 border-0'
                            />
                            <div
                                className='absolute top-14 left-0 bg-bgLight w-full text-lightGold p-3 rounded-xl max-h-60 overflow-y-auto hidden'
                                id='dropdown'
                                ref={dropdownRef}
                            >
                                <ul className='flex flex-col gap-y-1'>
                                    {filteredCompanies?.map((company) => (
                                        <li
                                            key={company._id}
                                            className={`
                                        ${
                                            company._id ===
                                                selectedCompany?._id &&
                                            'bg-bgDarkColor text-white'
                                        }
                                        `}
                                        >
                                            <button
                                                onClick={() => {
                                                    setSelectedCompany(company)
                                                    showDropdown()
                                                    document.getElementById(
                                                        'company',
                                                    ).value = company.username
                                                }}
                                                type='button'
                                                className='py-1 w-full bg-bgDarkColor rounded-md text-start px-4'
                                            >
                                                {company.username}
                                            </button>
                                        </li>
                                    ))}
                                </ul>
                            </div>
                        </div>
                        <div className='mb-3 flex flex-col w-full'>
                            <div className='flex flex-row justify-between items-center'>
                                <label
                                    htmlFor='service'
                                    className='block mb-1 text-sm font-medium text-black'
                                >
                                    Service
                                </label>
                            </div>
                            <select
                                name='service_id'
                                id='service'
                                className=' bg-bgLight   text-sm text-white rounded-lg  py-1  px-5 focus:outline-none w-full ring-0 border-0'
                                onChange={(e) => {
                                    getCostPrice(e.target.value)
                                }}
                                onClick={(e) => {
                                    setSelectedService(e.target.value)
                                }}
                            >
                                <option key={''} value='dummy' defaultChecked>
                                    Select Service
                                </option>
                                {services &&
                                    services.map((service) => (
                                        <option
                                            key={service._id}
                                            value={service.name}
                                        >
                                            {service.name}
                                        </option>
                                    ))}
                            </select>
                        </div>
                    </div>
                    <div className='flex flex-row justify-around items-center gap-x-3'>
                        <div className='mb-3 w-full'>
                            <div className='flex flex-row justify-between items-center'>
                                <label
                                    htmlFor='quantity'
                                    className='block mb-1 text-sm font-medium text-black'
                                >
                                    Quantity
                                </label>
                                {errors.quantity && (
                                    <p className='text-red-500 text-sm'>
                                        {errors.quantity.message}
                                    </p>
                                )}
                            </div>
                            <input
                                type='number'
                                {...register('quantity', {
                                    required: 'Quantity is required',
                                    min: {
                                        value: 1,
                                        message:
                                            'Quantity must be greater than 0',
                                    },
                                })}
                                className=' bg-bgLight   text-sm text-white rounded-lg  py-1  px-5 focus:outline-none w-full ring-0 border-0'
                                placeholder='00'
                            />
                        </div>
                        <div className='mb-3 w-full'>
                            <div className='flex flex-row justify-between items-center'>
                                <label
                                    htmlFor='sale_price'
                                    className='block mb-1 text-sm font-medium text-black'
                                >
                                    Sale Price
                                </label>
                                {errors.sale_price && (
                                    <p className='text-red-500 text-sm'>
                                        {errors.sale_price.message}
                                    </p>
                                )}
                            </div>
                            <input
                                type='number'
                                {...register('sale_price', {
                                    required: 'Sale Price is required',
                                    min: {
                                        value: 1,
                                        message:
                                            'Sale Price must be greater than 0',
                                    },
                                })}
                                onChange={handleSalePrice}
                                className=' bg-bgLight   text-sm text-white rounded-lg  py-1  px-5 focus:outline-none w-full ring-0 border-0'
                                placeholder='$ 00.00'
                            />
                        </div>
                    </div>
                    <div className='mb-3 flex flex-col w-full relative'>
                        <label
                            htmlFor='employees'
                            className='block mb-1 text-sm font-medium text-black'
                        >
                            Select Employees
                        </label>

                        <input
                            type='search'
                            name='employeeSearch'
                            id='employeeSearch'
                            onClick={() => showEmployee()}
                            onChange={handleEmployeeSearch}
                            placeholder='Search Employee'
                            disabled={selectedCompany === null}
                            className=' bg-bgLight   text-sm text-white rounded-lg  py-1  px-5 focus:outline-none w-full ring-0 border-0 disabled:cursor-not-allowed'
                        />
                        <div
                            className='absolute top-14 left-0 bg-bgLight w-full text-lightGold p-3 rounded-xl max-h-60 overflow-y-auto hidden'
                            id='employee'
                            ref={employeeRef}
                        >
                            <ul className='flex flex-col gap-y-1'>
                                {employees?.map((employee) => (
                                    <li
                                        key={employee._id}
                                        className=' py-1 w-full bg-bgDarkColor rounded-md text-start px-4'
                                    >
                                        <button
                                            onClick={() => {
                                                handleEmployee(employee)
                                            }}
                                            type='button'
                                            className='py-1 w-full bg-bgDarkColor rounded-md text-start px-4'
                                        >
                                            {employee.name}
                                        </button>
                                    </li>
                                ))}
                                {employees?.length === 0 && (
                                    <span
                                        key={'span'}
                                        className=' py-1 w-full bg-bgDarkColor rounded-md text-start px-4'
                                    >
                                        No Employees
                                    </span>
                                )}
                            </ul>
                        </div>
                        <div className='flex flex-wrap gap-2 mt-2'>
                            {selectedEmployees?.map((employee) => (
                                <span className='badge badge-neutral py-3'>
                                    {employee.name}
                                </span>
                            ))}
                        </div>
                    </div>
                    <div className='flex flex-row justify-around items-center gap-x-3'>
                        <div className='mb-3 w-full'>
                            <label
                                htmlFor='pending_amount'
                                className='block mb-1 text-sm font-medium text-black'
                            >
                                Pending Amount
                            </label>

                            <input
                                type='number'
                                value={pending}
                                disabled={true}
                                className='  text-sm text-white rounded-lg  py-1  px-5 focus:outline-none w-full ring-0 border-0 disabled:cursor-not-allowed disabled:bg-slate-700'
                                placeholder='$ 00.00'
                            />
                        </div>
                    </div>
                    <button type='submit' className='bg-bgDarkColor px-4 py-2'>
                        Submit
                    </button>
                </form>
            </div>
        </Wrapper>
    )
}

export default Add_Invoice
